#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>


#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_GREEN   "\x1b[32m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN    "\x1b[36m"
#define ANSI_COLOR_RESET   "\x1b[0m"

/* To set up client:
 *  1. getaddrinfo on server
 *  2. make call to socket
 *  3. make call to connect
*/
void configure( char*, char* );

void configure( char* ip, char* port )
{
	char* configure_path;
	int len;
	char* strbuff;
	int fd;

	configure_path = (char*)malloc(13*sizeof(char));
	strcpy( configure_path, "./.configure" );
	configure_path[12] = '\0';		
	if( (fd = open( configure_path, O_CREAT | O_TRUNC | O_APPEND | O_WRONLY, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH )) == -1 )
	{
        	printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__ );
      	}
	len = strlen(ip) + strlen(port) + 1;
	strbuff = (char*)malloc( len + 1 );
	strbuff[0] = '\0';
	strcat( strbuff, ip );
	strcat( strbuff, " " );
	strcat( strbuff, port );
	strbuff[len] = '\0';
	if( write( fd, strbuff, len ) == -1 )
        {
                printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__ );
        }

	if( close( fd ) == -1 )
	{
                printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
	}

	free(configure_path);
	free(strbuff);
}

int main( int argc, char** argv )
{
	char* command;
	// check the args
	command = argv[1];	
	if( strcmp(command, "configure") == 0 ) // create .configure file
	{
		configure( argv[2], argv[3] );  
	}
	else // temporarily just testing that connecting to server works
	{
		char* configure_path;
		int fd;
		struct addrinfo hints;
		struct addrinfo * result;
		int res;
		int sd; 
		char* ip;
		char* port;
		struct stat file_stat;
		char* filebuff;
		// call getaddrinfo
		hints.ai_flags = 0;
		hints.ai_family = AF_INET;
		hints.ai_socktype = SOCK_STREAM;
		
		//open .configure to get ip and port
		configure_path = (char*)malloc(13*sizeof(char));
                strcpy( configure_path, "./.configure" );
                configure_path[12] = '\0';

		if( stat(configure_path, &file_stat ) == -1 )
	        {
        	        printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
               		return;
       		}
       		if( (fd = open( configure_path, O_RDONLY)) == -1 )
       		{
                	printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
                	return;
        	}
        	filebuff = (char*)malloc( file_stat.st_size+1 );
        	if( read( fd, filebuff, file_stat.st_size  ) == -1 )
        	{
                	printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
                	return;
        	}
       		if( close(fd) == -1 )
        	{
                	printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__ );
                	return;
        	}
		ip = strtok( filebuff, " " );
		port = strtok( NULL, " " );
		printf( "ip: %s port: %s\n", ip, port);	
		// steps to connect to server
		if( (res = getaddrinfo( ip, port, &hints, &result )) != 0 )
		{
			printf( ANSI_COLOR_CYAN "Error getaddrinfo: %s Line#: %d\n" ANSI_COLOR_RESET, gai_strerror(res), __LINE__ );
			exit(2);
		}   
		
		if( ( sd = socket( result->ai_family, result->ai_socktype, result->ai_protocol )) == -1 )
		{
			printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
			exit(2);
		}
	
		if( connect( sd, result->ai_addr, result->ai_addrlen ) == -1 )
		{
			printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
			close(sd);
			exit(2);
		}
		// CONNECTED
		else{
			printf("Connected to server!\n");
		}

		//send message to server
		char * buffer = "Hello world!";
		if ( write(sd, buffer, strlen(buffer)) == -1){	
			printf( ANSI_COLOR_CYAN "Errno: %d Message: %s Line#: %d\n" ANSI_COLOR_RESET, errno, strerror(errno), __LINE__);
			close(sd); exit(2);
		}

		freeaddrinfo( result );
		free( configure_path );
		free( filebuff );
	}
	return 0;
}
